name: Release Build and Deploy

on:
  release:
    types: [published]
  # 添加手动触发，支持重新发布
  workflow_dispatch:
    inputs:
      tag:
        description: '要重新发布的版本标签 (例如: 1.0.2)'
        required: true
        type: string
      force_rebuild:
        description: '强制重新构建 (即使文件已存在)'
        required: false
        default: false
        type: boolean

jobs:
  build-and-release:
    name: 构建并发布程序包
    runs-on: ubuntu-latest
    # 添加明确的权限
    permissions:
      contents: write
      packages: read

    strategy:
      matrix:
        node-version: [18]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 运行测试和代码检查
        run: |
          npm run lint
          npm run build

      - name: 创建临时环境配置
        run: |
          cp .env.example .env
          echo "VOLCENGINE_API_KEY=ci_test_key" >> .env
          echo "DASHSCOPE_API_KEY=ci_test_key" >> .env

      - name: 获取版本号
        id: get_version
        run: |
          # 处理版本号 - 手动触发时使用输入的标签，否则使用release标签
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW_VERSION="${{ github.event.inputs.tag }}"
            echo "手动触发发布，版本: ${RAW_VERSION}"
          else
            RAW_VERSION="${{ github.event.release.tag_name }}"
            echo "Release触发发布，版本: ${RAW_VERSION}"
          fi

          # 构建产物使用v前缀版本，tag保持原始格式
          if [[ $RAW_VERSION == v* ]]; then
            # 如果tag已经有v前缀，去掉v作为原始版本
            CLEAN_VERSION="${RAW_VERSION#v}"
            VERSION="v${CLEAN_VERSION}"
          else
            # 如果tag没有v前缀，保持原样作为原始版本，构建时添加v前缀
            CLEAN_VERSION="${RAW_VERSION}"
            VERSION="v${RAW_VERSION}"
            echo "Tag不带v前缀，构建产物将使用: ${VERSION}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "raw_version=${RAW_VERSION}" >> $GITHUB_OUTPUT
          echo "clean_version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT

      - name: 检查是否需要强制重新构建
        id: check_rebuild
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          FORCE_REBUILD="${{ github.event.inputs.force_rebuild }}"

          # 检查二进制文件是否已存在
          BINARIES_EXIST=false
          if [ -d "binaries" ] && [ "$(ls -A binaries/)" ]; then
            echo "发现已存在的二进制文件"
            ls -la binaries/
            BINARIES_EXIST=true
          fi

          # 检查发布包是否已存在
          RELEASES_EXIST=false
          if [ -d "releases" ] && [ "$(ls -A releases/)" ]; then
            echo "发现已存在的发布包"
            ls -la releases/
            RELEASES_EXIST=true
          fi

          # 决定是否需要重新构建
          if [ "$FORCE_REBUILD" = "true" ]; then
            echo "强制重新构建模式"
            echo "need_build=true" >> $GITHUB_OUTPUT
            echo "need_package=true" >> $GITHUB_OUTPUT
          elif [ "$BINARIES_EXIST" = "false" ]; then
            echo "二进制文件不存在，需要构建"
            echo "need_build=true" >> $GITHUB_OUTPUT
            echo "need_package=true" >> $GITHUB_OUTPUT
          elif [ "$RELEASES_EXIST" = "false" ]; then
            echo "发布包不存在，需要打包"
            echo "need_build=false" >> $GITHUB_OUTPUT
            echo "need_package=true" >> $GITHUB_OUTPUT
          else
            echo "文件已存在，跳过构建"
            echo "need_build=false" >> $GITHUB_OUTPUT
            echo "need_package=false" >> $GITHUB_OUTPUT
          fi

      - name: 构建所有平台二进制文件
        if: steps.check_rebuild.outputs.need_build == 'true'
        run: |
          echo "开始构建二进制文件..."
          npm run build:binaries

      - name: 验证二进制文件
        run: |
          echo "验证二进制文件..."
          if [ ! -d "binaries" ] || [ ! "$(ls -A binaries/)" ]; then
            echo "❌ 二进制文件目录为空或不存在"
            exit 1
          fi
          npm run verify:binaries

      - name: 创建发布包
        if: steps.check_rebuild.outputs.need_package == 'true'
        run: |
          echo "创建发布包..."
          npm run create:release

      - name: 验证发布包
        run: |
          echo "验证发布包..."
          if [ ! -d "releases" ] || [ ! "$(ls -A releases/)" ]; then
            echo "❌ 发布包目录为空或不存在"
            exit 1
          fi
          npm run verify:releases

      - name: 列出生成的文件
        run: |
          echo "生成的二进制文件:"
          ls -la binaries/
          echo ""
          echo "生成的发布包:"
          ls -la releases/

      - name: 检查并清理发布文件
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          RAW_VERSION="${{ steps.get_version.outputs.raw_version }}"

          cd releases/

          echo "构建生成的原始文件列表:"
          ls -la

          # 删除可能的重复或错误文件
          echo "清理重复和错误的文件..."

          # 删除双v前缀的文件（如果存在）
          rm -f universal-ollama-proxy-v*v*.* 2>/dev/null || true

          # 删除没有v前缀的不正确格式文件（不删除正确的v前缀文件）
          rm -f universal-ollama-proxy-${RAW_VERSION}-*.* 2>/dev/null || true

          # 确保只保留正确格式的文件（v前缀版本）
          echo "清理后的文件列表:"
          ls -la

          # 验证Windows zip文件是否存在
          WIN_X64_ZIP="universal-ollama-proxy-${VERSION}-windows-x64.zip"
          WIN_ARM64_ZIP="universal-ollama-proxy-${VERSION}-windows-arm64.zip"

          if [ ! -f "$WIN_X64_ZIP" ]; then
            echo "❌ 缺少Windows x64 ZIP文件: $WIN_X64_ZIP"
            exit 1
          fi

          if [ ! -f "$WIN_ARM64_ZIP" ]; then
            echo "❌ 缺少Windows ARM64 ZIP文件: $WIN_ARM64_ZIP"
            exit 1
          fi

          echo "✅ 所有Windows ZIP文件检查通过"
          echo "最终发布文件列表:"
          ls -la universal-ollama-proxy-${VERSION}-*

      - name: 检查并设置Release描述
        id: set_release_body
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          RAW_VERSION="${{ steps.get_version.outputs.raw_version }}"

          # 如果是手动触发，或者release描述为空，则设置默认描述
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手动触发，设置默认Release描述"
            SHOULD_SET_BODY=true
          else
            # 检查release描述是否为空
            RELEASE_BODY="${{ github.event.release.body }}"
            if [ -z "$RELEASE_BODY" ] || [ "$RELEASE_BODY" = "null" ]; then
              echo "Release描述为空，设置默认描述"
              SHOULD_SET_BODY=true
            else
              echo "Release已有描述，保持不变"
              SHOULD_SET_BODY=false
            fi
          fi

          if [ "$SHOULD_SET_BODY" = "true" ]; then
            # 创建默认Release描述
            cat > release_body.md << 'EOF'
          # 🚀 Universal Ollama Proxy ${{ steps.get_version.outputs.version }} 发布

          **统一的 AI 服务代理** - 专为 GitHub Copilot Chat 的 Ollama 接入优化，提供其调用所使用到的兼容接口。

          ## ✨ 主要特性

          - 🔌 **多供应商支持** - 火山方舟引擎、阿里云百炼、DeepSeek、腾讯云、OpenRouter
          - 🔄 **统一接口** - 标准 OpenAI 格式，`provider:model` 命名规范
          - 🔧 **跨平台** - 支持 Windows/Linux/macOS, x64/ARM64 架构
          - 🛠️ **工具集成** - 为 GitHub Copilot Chat 优化的接口

          ## 📥 下载与安装

          | 操作系统 | 架构 | 下载文件 |
          |---------|-----|---------|
          | Windows | x64 | `universal-ollama-proxy-${{ steps.get_version.outputs.version }}-windows-x64.zip` |
          | Windows | ARM64 | `universal-ollama-proxy-${{ steps.get_version.outputs.version }}-windows-arm64.zip` |
          | Linux | x64 | `universal-ollama-proxy-${{ steps.get_version.outputs.version }}-linux-x64.tar.gz` |
          | Linux | ARM64 | `universal-ollama-proxy-${{ steps.get_version.outputs.version }}-linux-arm64.tar.gz` |
          | macOS | x64 | `universal-ollama-proxy-${{ steps.get_version.outputs.version }}-macos-x64.tar.gz` |
          | macOS | ARM64 | `universal-ollama-proxy-${{ steps.get_version.outputs.version }}-macos-arm64.tar.gz` |

          ## 🚀 快速开始

          1. 下载并解压
          2. 复制 `.env.example` 为 `.env` 并添加您的 API Keys
          3. 运行可执行文件，服务默认监听 http://localhost:11434
          4. 在 GitHub Copilot Chat 中使用 `provider:model` 格式访问模型

          ## 📚 相关链接

          - [详细文档](https://github.com/VicBilibily/universal-ollama-proxy/blob/main/README.md)
          - [问题反馈](https://github.com/VicBilibily/universal-ollama-proxy/issues)
          - [项目主页](https://github.com/VicBilibily/universal-ollama-proxy)

          ---

          **感谢您选择 Universal Ollama Proxy！** 🎉
          EOF
            echo "use_default_body=true" >> $GITHUB_OUTPUT
          else
            echo "use_default_body=false" >> $GITHUB_OUTPUT
          fi

      - name: 上传发布资产到 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.raw_version }}
          files: |
            releases/universal-ollama-proxy-${{ steps.get_version.outputs.version }}-*.zip
            releases/universal-ollama-proxy-${{ steps.get_version.outputs.version }}-*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: ${{ steps.set_release_body.outputs.use_default_body == 'true' && 'release_body.md' || '' }}
          append_body: ${{ steps.set_release_body.outputs.use_default_body == 'false' }}

      - name: 生成构建报告
        run: |
          echo "## 📊 构建报告" > build-report.md
          echo "" >> build-report.md
          echo "### 🏗️ 构建信息" >> build-report.md
          echo "- **版本:** ${{ steps.get_version.outputs.version }}" >> build-report.md
          echo "- **构建时间:** $(date -u)" >> build-report.md
          echo "- **Node.js 版本:** ${{ matrix.node-version }}" >> build-report.md
          echo "- **平台:** $(uname -a)" >> build-report.md
          echo "- **触发方式:** ${{ github.event_name }}" >> build-report.md
          echo "" >> build-report.md
          echo "### 📦 生成的文件" >> build-report.md
          echo "" >> build-report.md
          echo "#### 二进制文件" >> build-report.md
          echo '```' >> build-report.md
          ls -la binaries/ >> build-report.md
          echo '```' >> build-report.md
          echo "" >> build-report.md
          echo "#### 发布包" >> build-report.md
          echo '```' >> build-report.md
          ls -la releases/ >> build-report.md
          echo '```' >> build-report.md

      - name: 上传构建报告
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ steps.get_version.outputs.version }}
          path: build-report.md

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.get_version.outputs.version }}
          path: |
            binaries/
            releases/
          retention-days: 30

      - name: 构建成功通知
        if: success()
        run: |
          echo "🎉 发布构建成功完成!"
          echo "版本: ${{ steps.get_version.outputs.version }}"
          echo "触发方式: ${{ github.event_name }}"
          echo "生成的文件数量:"
          echo "  - 二进制文件: $(ls -1 binaries/ | wc -l) 个"
          echo "  - 发布包: $(ls -1 releases/ | wc -l) 个"
          echo "构建时间: $(date -u)"

      - name: 构建失败处理
        if: failure()
        run: |
          echo "❌ 发布构建失败!"
          echo "请检查以下内容:"
          echo "  - 代码编译是否成功"
          echo "  - 依赖安装是否正常"
          echo "  - 环境变量配置是否正确"
          echo "  - 网络连接是否稳定"
          echo ""
          echo "💡 重新发布方法:"
          echo "  1. 进入 Actions 页面"
          echo "  2. 选择 'Release Build and Deploy' 工作流"
          echo "  3. 点击 'Run workflow'"
          echo "  4. 输入版本号: ${{ steps.get_version.outputs.version }}"
          echo "  5. 选择是否强制重新构建"
          echo ""
          echo "详细日志请查看 Actions 页面"
          exit 1
