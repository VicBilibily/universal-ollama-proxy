name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    name: 测试和代码检查
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 代码格式检查
        run: npm run lint

      - name: TypeScript 编译
        run: npm run build

      - name: 创建临时环境配置
        run: |
          cp .env.example .env
          echo "VOLCENGINE_API_KEY=ci_test_key" >> .env
          echo "DASHSCOPE_API_KEY=ci_test_key" >> .env
          echo "TENCENTDS_API_KEY=ci_test_key" >> .env
          echo "DEEPSEEK_API_KEY=ci_test_key" >> .env
          echo "OPENROUTER_API_KEY=ci_test_key" >> .env

      - name: 验证构建
        run: npm run check

  build-test:
    name: 构建测试
    runs-on: ${{ matrix.os }}
    needs: test

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 构建 TypeScript
        run: npm run build

      - name: 测试构建二进制文件 (仅 Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run build:binaries
          npm run verify:binaries

      - name: 上传构建产物 (仅 Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: test-binaries
          path: binaries/
          retention-days: 7
